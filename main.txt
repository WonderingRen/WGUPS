import csv
import datetime


class HashTable:
    def __init__(self, capacity=40):
        self.table = []
        for i in range(capacity):
            self.table.append([])

    # O(1) Insert new item into hash table
    def insert(self, package):
        # get destination bucket list
        bucket = hash(package.package_id) % len(self.table)
        bucket_list = self.table[bucket]
        # insert item at tail of bucket list
        bucket_list.append(package)

    # O(n) Lookup item in hash table
    def lookup(self, package_id):
        bucket_index = hash(package_id) % len(self.table)
        bucket_list = self.table[bucket_index]
        for pkg in bucket_list:
            if int(pkg.package_id) == package_id:
                return pkg


class Package:
    def __init__(self, package_id, address, city, state, zip, deadline, weight, special_instructions):
        self.package_id = package_id
        self.address = address
        self.city = city
        self.state = state
        self.zip = zip
        self.deadline = deadline
        self.weight = weight
        self.special_instruction = special_instructions
        self.status = None
        self.timeOutForDelivery = None
        self.time_delivered = None
        self.truck = None
        self.mileage = 0

    def __str__(self):
        return f'{self.package_id}\t {self.address}\t {self.city}\t {self.state}\t {self.zip}\t {self.status}\t {self.time_delivered}\t {self.deadline}\t {self.weight}\t {self.special_instruction}\t'  # TODO

    def is_delivered(self):
        return self.time_delivered is not None

    def is_not_delivered(self):
        return not self.is_delivered()

    # package priority 9/7 if eod is false
    def priority(self):
        return self.deadline == "9:00 AM"


    # # package status 9/7
    def set_status(self, user_time):
        if user_time > self.time_delivered:
            self.status = "Delivered"
        else:
            if self.timeOutForDelivery > user_time:
                self.status = "At Hub"
            else:
                self.status = "En route"


# establish hashmap instance (live object)
hashMap = HashTable()
# from csv file
address_list = []
# from csv file
distance_list = []

with open('Addresses.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    for row in reader:
        address_list.append(row)

with open('Distance.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    for row in reader:
        distance_list.append(row)

with open('Package.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    # loop through csv
    for row in reader:
        package_id = int(row[0])
        address = row[1]
        city = row[2]
        state = row[3]
        zip = row[4]
        deadline = row[5]
        weight = row[6]
        special_instructions = row[7]
        pkg = Package(package_id, address, city, state, zip, deadline, weight, special_instructions)
        hashMap.insert(pkg)


    def get_hash_map():
        return hashMap
    # convert to package obj


class Truck:
    def __init__(self, truck_id, package_list, start_time=None):
        self.truck_id = truck_id
        self.package_list = package_list
        self.start_time = start_time
        self.speed = 18

    def has_more_packages_to_deliver(self):
        for packageId in self.package_list:
            package = hashMap.lookup(packageId)
            if package.is_not_delivered():
                return True
        return False


truck1 = Truck(1, [1, 7, 8, 15, 29, 30, 31, 34, 37, 40], datetime.datetime(2022, 1, 1, 8, 0, 0))
truck2 = Truck(2, [3, 5, 6, 10, 11, 13, 14, 16, 18, 19, 20, 25, 36, 38], datetime.datetime(2022, 1, 1, 9, 5, 0))
truck3 = Truck(3, [2, 4, 9, 12, 17, 21, 22, 23, 24, 26, 27, 28, 32, 33, 35, 39], datetime.datetime(2022, 1, 1, 10, 20, 0)) # packages 25 and 6 need to be delivered first. How??


# given search address, loop through list to find position
def get_index_for_address(search_address):
    index = 0
    for address in address_list:
        # strip() removes white spaces
        if address[1].strip() == search_address.strip():
            return index
        index += 1
    return -1


def get_dist_between_addresses(start, end):
    start_index = get_index_for_address(start)
    end_index = get_index_for_address(end)
    if start_index == -1 or end_index == -1:
        print(start, start_index)
        print(end, end_index)
    if end_index > start_index:
        distance = float(distance_list[end_index][start_index])
    else:
        distance = float(distance_list[start_index][end_index])  # flip references to account for larger end_index
    return distance


# Nearest neighbor routine
# O(n^2)
def deliver_packages(truck):
    current_location = address_list[0][1].strip()
    current_time = truck.start_time # current_time's number means____?
    total_distance = 0
    while truck.has_more_packages_to_deliver():
        next_package = None  # Best candidate
        next_package_distance = float('inf')
        # check for priority package in tr.packagelist and use list comprehension (l 164)
        tr_priority = [package_id for package_id in truck.package_list if hashMap.lookup(package_id).priority() and hashMap.lookup(package_id).is_not_delivered()]
        tr_priority = tr_priority if tr_priority else truck.package_list
        for package_id in tr_priority:
            package = hashMap.lookup(package_id)
            if package.is_not_delivered():
                distance_to_package = get_dist_between_addresses(current_location,
                                                                 package.address)  # instance of package
                if distance_to_package < next_package_distance:
                    next_package = package
                    next_package_distance = distance_to_package
        total_distance += next_package_distance
        # drive to address of package
        current_location = next_package.address  # addresses have two formats (confusing) so need to be consistent whether we have street or numbers
        current_time = current_time + datetime.timedelta(hours=next_package_distance / truck.speed)
        next_package.time_delivered = current_time
        next_package.timeOutForDelivery = truck.start_time
    return current_time, total_distance


truck1_finish_time, truck1_total_distance = deliver_packages(truck1)
truck2_finish_time, truck2_total_distance = deliver_packages(truck2)
truck3_finish_time, truck3_total_distance = deliver_packages(truck3)
total_mileage = truck1_total_distance + truck2_total_distance + truck3_total_distance

# change address for package 9
pkg9 = hashMap.lookup(9)
pkg9.address = "410 S State St"
pkg9.city = "Salt Lake City"
pkg9.state = "UT"
pkg9.zip = "84111"


# 9/7 to check which truck a package is on and what time that truck left the hub
def check_truck_package_is_on(package_to_find):
    truck_package_is_on = None
    trucks = [truck1, truck2, truck3]
    for truck in trucks:
        for package_id in truck.package_list:
            if package_id < package_to_find:
                continue
            elif package_id == package_to_find:
                truck_package_is_on = truck
            elif package_id > package_to_find:
                break
    package.timeOutForDelivery = truck_package_is_on.start_time


# UI
option = ""
while option != "4":
    print(
        "_______________________________________________________________________________________________________________")
    print(
        "                                          WELCOME TO WGUPS                                                     ")
    print(
        "_______________________________________________________________________________________________________________")
    print("1. Display status of all packages")
    print("2. Look up package")
    print("3. Display total mileage travelled")
    print("4. Exit")
    option = input("Please select from the given options: ")

    if option == "1":
        h, m = input("Please enter a time in hh:mm: ").split(":")
        user_input = datetime.datetime(2022, 1, 1, int(h), int(m), 0)
        for package_id in range(1, 41):
            package = hashMap.lookup(package_id)
            package.set_status(user_input)
            print(package)
    elif option == "2":
        package_id = input("Please enter package id: ")
        # how to find package?
        h, m = input("Please enter a time in hh:mm: ").split(":")
        user_input = datetime.datetime(2022, 1, 1, int(h), int(m), 0)
        package = hashMap.lookup(int(package_id))
        package.set_status(user_input)
        print(package)
    elif option == "3":
        print(total_mileage)
    elif option == "4":
        exit("Thank you for using WGUPS.")

