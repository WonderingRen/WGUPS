import csv
import datetime


class HashTable:
    def __init__(self, capacity=40):
        self.table = []
        for i in range(capacity):
            self.table.append([])

    # O(1) Insert new item into hash table
    def insert(self, package):
        # get destination bucket list
        bucket = hash(package.package_id) % len(self.table)
        bucket_list = self.table[bucket]
        # insert item at tail of bucket list
        bucket_list.append(package)

    # O(n) Lookup item in hash table
    def lookup(self, package_id):
        bucket_index = hash(package_id) % len(self.table)
        bucket_list = self.table[bucket_index]
        for pkg in bucket_list:
            if int(pkg.package_id) == package_id:
                return pkg


class Package:
    def __init__(self, package_id, address, city, state, zip, deadline, weight, special_instructions):
        self.package_id = package_id
        self.address = address
        self.city = city
        self.state = state
        self.zip = zip
        self.deadline = deadline
        self.weight = weight
        self.special_instruction = special_instructions
        # add delivery status? ie: self.status = status??
        self.timeOutForDelivery = None
        self.time_delivered = None
        self.truck = None
        self.mileage = 0

    def __str__(self):
        return f'{self.package_id}\t {self.address}\t {self.city}\t {self.state}\t {self.zip}\t {self.time_delivered}\t {self.deadline}\t {self.weight}\t {self.special_instruction}\t'  # TODO

    def is_delivered(self):
        return self.time_delivered is not None

    def is_not_delivered(self):
        return not self.is_delivered()


# establish hashmap instance (live object)
hashMap = HashTable()
# from csv file
address_list = []
# from csv file
distance_list = []

with open('Addresses.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    for row in reader:
        address_list.append(row)

with open('Distance.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    for row in reader:
        distance_list.append(row)

with open('Package.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    # loop through csv
    for row in reader:
        package_id = int(row[0])
        address = row[1]
        city = row[2]
        state = row[3]
        zip = row[4]
        deadline = row[5]
        weight = row[6]
        special_instructions = row[7]
        pkg = Package(package_id, address, city, state, zip, deadline, weight, special_instructions)
        hashMap.insert(pkg)


    def get_hash_map():
        return hashMap
    # convert to package obj


class Truck:
    def __init__(self, truck_id, package_list, start_time=None):
        self.truck_id = truck_id
        self.package_list = package_list
        self.start_time = start_time
        self.speed = 18

    def has_more_packages_to_deliver(self):
        for packageId in self.package_list:
            package = hashMap.lookup(packageId)
            if package.is_not_delivered():
                return True
        return False


truck1 = Truck(1, [1, 2, 4, 5, 7, 8, 10, 11, ], datetime.datetime(2022, 1, 1, 8, 0, 0))
truck2 = Truck(2, [3, 13, 14, 15, 16, 18, 19, 20, 29, 30, 31, 34, 36, 37, 38, 40], datetime.datetime(2022, 1, 1, 9, 5, 0))
truck3 = Truck(3, [6, 9, 12, 17, 21, 22, 23, 24, 25, 26, 27, 33, 28, 32, 35, 39]) # packages 25 and 6 need to be delivered first. How??
# also, how to correct address for pkg 9
# for package_id in Truck1.package_list:
#    print(package_id)



# given search address, loop through list to find position
def get_index_for_address(search_address):
    index = 0
    for address in address_list:
        # strip() removes white spaces
        if address[1].strip() == search_address.strip():
            return index
        index += 1
    return -1


def get_dist_between_addresses(start, end):
    start_index = get_index_for_address(start)
    end_index = get_index_for_address(end)
    if start_index == -1 or end_index == -1:
        print(start, start_index)
        print(end, end_index)
    if end_index > start_index:
        distance = float(distance_list[end_index][start_index])
    else:
        distance = float(distance_list[start_index][end_index])  # flip references to account for larger end_index
    return distance


# Nearest neighbor routine

def deliver_packages(truck):
    current_location = address_list[0][1].strip()
    current_time = truck.start_time # current_time's number means____?
    total_distance = 0
    while truck.has_more_packages_to_deliver():
        next_package = None # Best candidate
        next_package_distance = float('inf')
        for packageId in truck.package_list:
            package = hashMap.lookup(packageId)
            if package.is_not_delivered():
                # check to see if this is minimum distance
                # package_address = get_address_for_package(package)
                distance_to_package = get_dist_between_addresses(current_location, package.address) # instance of package
                if distance_to_package < next_package_distance:
                    next_package = package
                    next_package_distance = distance_to_package
        total_distance += next_package_distance
        # drive to address of package
        current_location = next_package.address # addresses have two formats (confusing) so need to be consistent whether we have street or numbers
        current_time = current_time + datetime.timedelta(hours=next_package_distance/truck.speed)
        next_package.time_delivered = current_time
        return current_time, total_distance



truck1_finish_time, truck1_total_distance = deliver_packages(truck1)
truck2_finish_time, truck2_total_distance = deliver_packages(truck2)
truck3.start_time = truck1_finish_time
truck3_finish_time, truck3_total_distance = deliver_packages(truck3)
total_mileage = truck1_total_distance + truck2_total_distance + truck3_total_distance
# print(total_mileage) # not working WHY??



# UI
print("_______________________________________________________________________________________________________________")
print("                                          WELCOME TO WGUPS                                                     ")
print("_______________________________________________________________________________________________________________")
print("1. Display status of all packages")
print("2. Look up package")
print("3. Display total mileage travelled")
print("4. Exit")
option = input("Please select from the given options: ")

if option == "1":
    for package_id in range (1,41):
        package = hashMap.lookup(package_id)
        print(package)
elif option == "2":
    input("Please enter package id: ")
    # how to find package?
elif option == "3":
    print(total_mileage)  # not working WHY??
elif option == "4":
    exit("Thank you for using WGUPS.")
